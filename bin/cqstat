#!/usr/bin/env python
import path

import argparse
from cmdQueue.cmdQ import cmdq

parser           = argparse.ArgumentParser(description='Show cmdQueue worker/job status.')
parser.add_argument('-n', '--name', help = 'The name of the job.', required = False)
parser.add_argument('-p', '--pid', help = 'The pid of the job.', required = False)
parser.add_argument('-s', '--status', help = 'List jobs with the status', required = False, nargs='*', default = [cmdq.model.STATUS['submitted'], cmdq.model.STATUS['pending'], cmdq.model.STATUS['running']])
args             = parser.parse_args()

if not args.name and not args.pid:
	jobs =  cmdq.listJobs(args.status)
	print ''
	if not jobs:
		print 'Jobs: 0.'
	else:
		cols    = cmdq.model.TABLECOLS_JOB.keys()
		maxlens = []
		for i, col in enumerate(cols):
			jobattrs = [str(job[col]) for job in jobs]
			maxlen = max(len(col), max(map(len, jobattrs))) + 2
			fmtstr = '%' + str(maxlen) + 's'
			maxlens.append(maxlen)
			print fmtstr % col.upper(),
		print '\n' + '+'.join(['-'*(ml) for ml in maxlens])
		
		NoJobs = {}
		for i, job in enumerate(jobs):
			status = job['status']
			if not status in NoJobs:
				NoJobs[status] = 0
			NoJobs[status] += 1
			print ' '.join([('%' + str(maxlens[x]) + 's') % job[col] for x, col in enumerate(cols)])
		print '\nJobs: ' + ', '.join([st.upper() + ': ' + str(nj) for st, nj in NoJobs.items()])
		
	print cmdq.workerInfo()
			
if args.name:
	job = cmdq.model.getJobByName(name)
	print job
elif args.pid:
	job = cmdq.model.getJobByPid(name)
	print job
