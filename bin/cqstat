#!/usr/bin/env python
import path
import argparse

from os import path
from cmdQueue.cmdq import cmdQ
from cmdQueue.model import Model

def printJobs(jobs, cols):
	for job in jobs:
		print '-' * 35
		for col in cols:
			print "%-14s: %s" % (col.upper(), job[col])

if __name__ == '__main__':
	parser           = argparse.ArgumentParser(description='Show cmdQueue worker/job status.')
	parser.add_argument('--config', help = 'The configuration file.', default=path.expanduser('~/.cmdQueue/cmdQueue.conf'))
	parser.add_argument('-n', '--name', help = 'The name of the job.', required = False)
	parser.add_argument('-p', '--pid', help = 'The pid of the job.', required = False)
	parser.add_argument('-s', '--status', help = 'List jobs with the status', required = False, nargs='*', default = [Model.STATUS['submitted'], Model.STATUS['pending'], Model.STATUS['running']])
	args             = parser.parse_args()
	
	cmdq = cmdQ(args.config)

	if not args.name and not args.pid:
		if 'all' in args.status or 'All' in args.status or 'ALL' in args.status:
			args.status = []
		jobs =  cmdq.listJobs(args.status)
		print ''
		if not jobs:
			print 'Jobs: 0.'
		else:
			cols    = cmdq.model.TABLECOLS_JOB.keys()
			maxlens = []
			for i, col in enumerate(cols):
				jobattrs = [str(job[col]) for job in jobs]
				maxlen = max(len(col), max(map(len, jobattrs))) + 2
				fmtstr = '%' + str(maxlen) + 's'
				maxlens.append(maxlen)
				print fmtstr % col.upper(),
			print '\n' + '+'.join(['-'*(ml) for ml in maxlens])
			
			NoJobs = {}
			for i, job in enumerate(jobs):
				status = job['status']
				if not status in NoJobs:
					NoJobs[status] = 0
				NoJobs[status] += 1
				print ' '.join([('%' + str(maxlens[x]) + 's') % job[col] for x, col in enumerate(cols)])
			print '\nJobs: ' + ', '.join([st.upper() + ': ' + str(nj) for st, nj in NoJobs.items()])
			
		print cmdq.workerInfo()
				
	if args.name:
		jobs = cmdq.model.getJobsByName(args.name)
		printJobs(jobs, cmdq.model.TABLECOLS_JOB)
	elif args.pid:
		jobs = cmdq.model.getJobsByPid(args.pid)
		printJobs(jobs, cmdq.model.TABLECOLS_JOB)
